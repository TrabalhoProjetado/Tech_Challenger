# -*- coding: utf-8 -*-
"""Brent ML

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19UHI53aHKVm-Nv-6n5n-nyyVNdvsU6l9
"""

import pandas as pd

dados_petroleo = pd.read_csv("/content/Base Petróleo.csv", delimiter=';', usecols=[0, 1], names=['Data', 'Preço'], skiprows=1)

# Formatando
dados_petroleo['Preço'] = dados_petroleo['Preço'].str.replace(',', '.').astype(float)
dados_petroleo['Data'] = pd.to_datetime(dados_petroleo['Data'], dayfirst=True, errors='coerce')

# Limpando
dados_petroleo.dropna(inplace=True)

print(dados_petroleo.head())
dados_petroleo.info()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Carregar e preparar os dados
dados_petroleo = pd.read_csv("/content/Base Petróleo.csv", delimiter=';', usecols=[0, 1], names=['Data', 'Preço'], skiprows=1)
dados_petroleo['Preço'] = dados_petroleo['Preço'].str.replace(',', '.').astype(float)
dados_petroleo['Data'] = pd.to_datetime(dados_petroleo['Data'], dayfirst=True, errors='coerce')
dados_petroleo.dropna(inplace=True)
dados_petroleo.set_index('Data', inplace=True)

# Normalização dos dados
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(dados_petroleo['Preço'].values.reshape(-1,1))

# Criando dados de treino
def create_dataset(data, look_back=1):
    X, Y = [], []
    for i in range(len(data)-look_back-1):
        a = data[i:(i+look_back), 0]
        X.append(a)
        Y.append(data[i + look_back, 0])
    return np.array(X), np.array(Y)

look_back = 5
X, y = create_dataset(scaled_data, look_back)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Definição do modelo LSTM
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(50))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

# Dividindo dados em treino e teste
train_size = int(len(X) * 0.80)
test_size = len(X) - train_size
trainX, trainY = X[0:train_size], y[0:train_size]
testX, testY = X[train_size:], y[train_size:]

# Treinando o modelo
model.fit(trainX, trainY, epochs=20, batch_size=32, verbose=2)

# Fazendo previsões
train_predict = model.predict(trainX)
test_predict = model.predict(testX)

# Invertendo a normalização
train_predict = scaler.inverse_transform(train_predict)
trainY = scaler.inverse_transform([trainY])
test_predict = scaler.inverse_transform(test_predict)
testY = scaler.inverse_transform([testY])

# Calculando RMSE
trainScore = np.sqrt(mean_squared_error(trainY[0], train_predict[:,0]))
print('Train Score: %.2f RMSE' % (trainScore))
testScore = np.sqrt(mean_squared_error(testY[0], test_predict[:,0]))
print('Test Score: %.2f RMSE' % (testScore))

train_size = int(len(scaled_data) * 0.80)
test_size = len(scaled_data) - train_size
test_start_index = train_size + look_back

# Assegurando que o array de plotagem para os testes é suficientemente grande
testPredictPlot = np.empty_like(scaled_data)
testPredictPlot[:, :] = np.nan

# Corrigindo a inserção no array de plotagem para teste
if test_start_index + len(test_predict) <= len(scaled_data):
    testPredictPlot[test_start_index:test_start_index + len(test_predict), :] = test_predict
else:
    excess = (test_start_index + len(test_predict)) - len(scaled_data)
    testPredictPlot[test_start_index:len(scaled_data), :] = test_predict[:len(test_predict) - excess]

# Plot dos dados originais e das previsões
plt.figure(figsize=(15, 6))
plt.plot(scaler.inverse_transform(scaled_data), label='Original data')
plt.plot(trainPredictPlot, label='Training set prediction')
plt.plot(testPredictPlot, label='Test set prediction')
plt.title('Preços do Petróleo: Dados Reais vs. Previsões')
plt.xlabel('Tempo')
plt.ylabel('Preço do Petróleo')
plt.legend()
plt.show()

dates = dados_petroleo.index

# Configurando os arrays de plotagem para usar as datas como índice
trainPredictPlot = pd.DataFrame(trainPredictPlot, index=dates, columns=['Preço'])
testPredictPlot = pd.DataFrame(testPredictPlot, index=dates, columns=['Preço'])

# Plot dos dados originais e das previsões com datas no eixo X
plt.figure(figsize=(15, 6))
plt.plot(dados_petroleo['Preço'], label='Original data')
plt.plot(trainPredictPlot, label='Training set prediction', linestyle='--')
plt.plot(testPredictPlot, label='Test set prediction', linestyle='--')
plt.title('Preços do Petróleo: Dados Reais vs. Previsões')
plt.xlabel('Data')
plt.ylabel('Preço do Petróleo')
plt.legend()
plt.show()